import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.24'
	id 'org.jetbrains.kotlin.jvm' version '1.9.24'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.24'
	id 'jacoco-report-aggregation'
  id "de.undercouch.download" version "5.3.0"
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
  ktlint
}

repositories {
	mavenCentral()
}

dependencies {
  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'org.postgresql:postgresql'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation("org.springframework.boot:spring-boot-starter-validation")
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
  implementation 'org.jetbrains.kotlin:kotlin-reflect'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
  implementation 'org.springframework.boot:spring-boot-starter-validation:3.2.5'
  implementation("org.springframework.boot:spring-boot-starter-logging")
  implementation("com.newrelic.agent.java:newrelic-agent:7.2.0")
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
  testImplementation 'com.h2database:h2'
  testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'


  ktlint("com.pinterest:ktlint:0.49.1") {
    attributes {
      attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
    }
  }
}

tasks.withType(KotlinCompile).configureEach {
  kotlinOptions {
    freeCompilerArgs += "-Xjsr305=strict"
    jvmTarget = 21
  }
}

tasks.named('test') {
  useJUnitPlatform()
  finalizedBy('jacocoTestReport')
}

tasks.register("ktlintCheck", JavaExec) {
  group = "verification"
  description = "Check Kotlin code style."
  classpath = configurations.ktlint
  mainClass = "com.pinterest.ktlint.Main"
  args "src/**/*.kt", "**.kts", "!**/build/**"
}

tasks.named("check") {
  dependsOn tasks.named("ktlintCheck")
  dependsOn("jacocoTestCoverageVerification")
}

tasks.register("ktlintFormat", JavaExec) {
  group = "formatting"
  description = "Fix Kotlin code style deviations."
  classpath = configurations.ktlint
  mainClass = "com.pinterest.ktlint.Main"
  jvmArgs "--add-opens=java.base/java.lang=ALL-UNNAMED"
  args "-F", "src/**/*.kt", "**.kts", "!**/build/**"
}

tasks.register('installGitHooks', Copy) {
  from new File(rootProject.rootDir, '/hooks')
  into { new File(rootProject.rootDir, '/.git/hooks') }
  fileMode 0775
}

tasks.build {
  dependsOn installGitHooks
}

tasks.jacocoTestCoverageVerification {
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: [
        "**/auth/**",
        "**/exception/**"
      ])
    }))
  }
	violationRules {
		rule {
			element = "BUNDLE"
			limit {
				counter = "INSTRUCTION"
				value = "COVEREDRATIO"
				minimum = 0.80
			}
			limit {
				counter = "BRANCH"
				value = "COVEREDRATIO"
				minimum = 0.70
			}
		}
	}
}

jacocoTestReport {
  dependsOn test
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: [
        "**/auth/**",
        "**/exception/**"
      ])
    }))
  }
}


tasks.register('downloadNewrelic', Download) {
  mkdir 'newrelic'
  src 'https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip'
  dest file('newrelic')
}

tasks.register('unzipNewrelic', Copy) {
  from zipTree(file('newrelic/newrelic-java.zip'))
  into rootDir
}
